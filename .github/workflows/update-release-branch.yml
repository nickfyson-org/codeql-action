name: Update release branch
on:
  # You can trigger this workflow via workflow dispatch to start a release.
  # This will open a PR to update the v2 release branch.
  workflow_dispatch:

  # When the v2 release is complete, this workflow will open a PR to update the v1 release branch.
  push:
    branches:
      - releases/*

jobs:

  prepare:
    runs-on: ubuntu-latest
    if: github.repository == 'nickfyson-org/codeql-action'
    outputs:
      version: ${{ steps.versions.outputs.version }}
      major_version: ${{ steps.versions.outputs.major_version }}
      latest_tag: ${{ steps.versions.outputs.latest_tag }}
      release_branch: ${{ steps.branches.outputs.release_branch }}
      backport_source_branch:
      backport_target_branches: ${{ steps.branches.outputs.backport_target_branches }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/release-prepare

    - name: Get version tags
      id: versions
      run: |
        VERSION="v$(jq '.version' -r 'package.json')"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        MAJOR_VERSION=$(cut -d '.' -f1 <<< "${VERSION}")
        echo "major_version=${MAJOR_VERSION}" >> $GITHUB_OUTPUT
        LATEST_TAG=$(git tag --sort=-v:refname | head -1)
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

    - id: branches
      name: Determine older release branches
      run: |
          python -c 'import os, json; open(os.environ["GITHUB_OUTPUT"], "a").write("release_branch=releases/${MAJOR_VERSION}\n")'
          python -c 'import os, json; open(os.environ["GITHUB_OUTPUT"], "a").write("backport_target_branches="+json.dumps(["releases/v2"])+"\n")'
      # TODO determine the set of older release branches ðŸ‘†
      # ensure backport_target_branches is empty for anything other than the latest release branch
      # abort if the


  update:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref_name == 'nickfyson/new-release-workflows'
    needs: [prepare]
    env:
      REF_NAME: "${{ github.ref_name }}"
      REPOSITORY: "${{ github.repository }}"
      MAJOR_VERSION: "${{ needs.prepare.outputs.major_version }}"
      LATEST_TAG: "${{ needs.prepare.outputs.latest_tag }}"
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/release-prepare

    # when the workflow has been manually triggered on main,
    # we know that we definitely want the release branch to exist
    - name: Ensure release branch exists
      run: |
        echo "MAJOR_VERSION ${MAJOR_VERSION}"
        RELEASE_BRANCH=releases/${MAJOR_VERSION}
        if git checkout $RELEASE_BRANCH > /dev/null 2>&1; then
            echo "Branch $RELEASE_BRANCH already exists"
            echo ""
        else
            echo "Creating $RELEASE_BRANCH branch"
            git checkout -b ${RELEASE_BRANCH} ${LATEST_TAG}
            git push --set-upstream origin ${RELEASE_BRANCH}
            git branch --show-current
            echo ""
        fi
        echo "Returning to branch: ${REF_NAME}"
        git checkout ${REF_NAME}

    - name: Update current release branch
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo 'SOURCE_BRANCH=main'
        echo 'TARGET_BRANCH=releases/$MAJOR_VERSION'
        # python .github/update-release-branch.py \
        #   --github-token ${{ secrets.GITHUB_TOKEN }} \
        #   --repository-nwo ${{ github.repository }} \
        #   --mode ${MAJOR_VERSION}-release \
        #   --conductor ${GITHUB_ACTOR}

  backport:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ needs.prepare.outputs.backport_target_branches != '[]' && needs.prepare.outputs.backport_target_branches != '' }}
    # if: ${{ github.event_name == 'push' && needs.prepare.outputs.backport_target_branches != '[]' && needs.update.outputs.backport_target_branches != '' }}
    strategy:
      matrix:
        target_branch: ${{ fromJson(needs.prepare.outputs.backport_target_branches) }}
    env:
      SOURCE_BRANCH: ${{ needs.prepare.outputs.backport_source_branch }}
      TARGET_BRANCH: ${{ matrix.target_branch }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/release-prepare

    - name: Update older release branch
      run: |
        echo 'SOURCE_BRANCH=$SOURCE_BRANCH'
        echo 'TARGET_BRANCH=$TARGET_BRANCH'
        # python .github/update-release-branch.py \
        #   --github-token ${{ secrets.GITHUB_TOKEN }} \
        #   --repository-nwo ${{ github.repository }} \
        #   --mode v1-release \
        #   --conductor ${GITHUB_ACTOR}
