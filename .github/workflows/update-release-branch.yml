name: Update release branch
on:
  # You can trigger this workflow via workflow dispatch to start a release.
  # This will open a PR to update the v2 release branch.
  workflow_dispatch:

  # When the v2 release is complete, this workflow will open a PR to update the v1 release branch.
  push:
    branches:
      - releases/*

jobs:
  update:
    timeout-minutes: 45
    runs-on: ubuntu-latest
    if: github.repository == 'nickfyson-org/codeql-action'
    steps:
    - name: Dump environment
      run: env

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: '${{ toJson(github) }}'
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v4
      with:
        # Need full history so we calculate diffs
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub==1.55 requests

    - name: Update git config
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Get version tags
      id: versions
      run: |
        VERSION="v$(jq '.version' -r 'package.json')"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        # Update the `vx` tag
        MAJOR_VERSION=$(cut -d '.' -f1 <<< "${VERSION}")
        echo "major_version=${MAJOR_VERSION}" >> $GITHUB_OUTPUT


    # only when the workflow has been manually triggered on main do
    # we know that we definitely want the release branch to exist
    - name: Ensure release branch exists
      if: github.event_name == 'workflow_dispatch' && github.ref_name == 'nickfyson/new-release-workflows'
      env:
        REF_NAME: "${{ github.ref_name }}"
        REPOSITORY: "${{ github.repository }}"
        MAJOR_VERSION: "${{ steps.versions.outputs.major_version }}"
      run: |
        echo "MAJOR_VERSION ${MAJOR_VERSION}"
        LATEST_TAG=$(git tag --sort=-v:refname | head -1)
        echo "LATEST_TAG ${LATEST_TAG}"
        RELEASE_BRANCH=releases/${MAJOR_VERSION}
        if gh api repos/$REPOSITORY/branches/$RELEASE_BRANCH > /dev/null 2>&1
        then
          echo "Release branch ${RELEASE_BRANCH} already exists"
        else
          git checkout -b ${RELEASE_BRANCH} ${LATEST_TAG}
          git push --set-upstream origin ${RELEASE_BRANCH}
          git rev-parse --abbrev-ref HEAD
          git checkout ${REF_NAME}
          git rev-parse --abbrev-ref HEAD
        fi


    # - name: Update v2 release branch
    #   if: github.event_name == 'workflow_dispatch'
    #   run: |
    #     python .github/update-release-branch.py \
    #       --github-token ${{ secrets.GITHUB_TOKEN }} \
    #       --repository-nwo ${{ github.repository }} \
    #       --mode v2-release \
    #       --conductor ${GITHUB_ACTOR}

    # - name: Update v1 release branch
    #   if: github.event_name == 'push'
    #   run: |
    #     python .github/update-release-branch.py \
    #       --github-token ${{ secrets.GITHUB_TOKEN }} \
    #       --repository-nwo ${{ github.repository }} \
    #       --mode v1-release \
    #       --conductor ${GITHUB_ACTOR}
